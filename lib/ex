مشروع تطبيق الطقس باستخدام Flutter

1. main.dart - نقطة البداية للتطبيق

في ملف main.dart، قمنا بتعريف تطبيق باستخدام StatelessWidget. الهدف هو استخدام Provider لإدارة الحالة بين الواجهات المختلفة داخل التطبيق، حيث نستخدمه لتمرير البيانات بين صفحة البحث SearchPage وصفحة العرض الرئيسية HomePage.


2. HomePage - الصفحة الرئيسية لعرض بيانات الطقس

HomePage هنا عبارة عن StatefulWidget لأنها تحتاج إلى تحديث الواجهة عندما يتم استرداد بيانات جديدة.

الصفحة بتعرض إما بيانات الطقس، أو إذا كانت البيانات غير متاحة (null) ستظهر رسالة تشجيع للمستخدم لإجراء بحث عن الطقس.


3. SearchPage - صفحة البحث عن مدينة

SearchPage تحتوي على تصميم بسيط بالإضافة إلى حقل نصي (TextField) ليقوم المستخدم بإدخال اسم المدينة.

عندما يضغط المستخدم على زر البحث، يتم تمرير اسم المدينة إلى WeatherService لجلب بيانات الطقس المتعلقة بها.


4. WeatherService - خدمة جلب بيانات الطقس

WeatherService هو المكان المسؤول عن جلب بيانات الطقس من API خارجي.

هذه الخدمة تستقبل اسم المدينة كمدخل، وتقوم بإرجاع بيانات الطقس المرتبطة بها في شكل WeatherModel، وهو نموذج البيانات الذي نستخدمه داخل التطبيق.


5. WeatherModel - نموذج البيانات الخاصة بالطقس

WeatherModel هو عبارة عن نموذج (أو كلاس) يحتوي على تعريف لبيانات الطقس المطلوبة.

هذا النموذج يسهل التعامل مع البيانات التي تجلبها الخدمة WeatherService، حيث يقوم بتخزين وتنسيق البيانات بشكل منظم.


6. Provider - إدارة الحالة بين الواجهات

Provider يعتبر أحد الطرق الشائعة لإدارة الحالة في Flutter. من خلاله، يتم تحديث الواجهة تلقائيًا عند جلب بيانات جديدة من WeatherService.

ChangeNotifier مع Provider يوفر آلية للتنبيه عندما تتغير البيانات، مما يؤدي إلى تحديث واجهة المستخدم بشكل تلقائي.



---

نقاط تقنية مهمة:

استخدام StatelessWidget و StatefulWidget: StatelessWidget بيستخدم للصفحات أو الأجزاء اللي مش بتتغير حالتها أثناء العرض. بينما StatefulWidget يستخدم للصفحات اللي ممكن تحتاج لتحديث مستمر زي HomePage.

Provider و ChangeNotifier: Provider بيساعدنا في تمرير البيانات وتحديث الواجهات بشكل سهل ومرن. ChangeNotifier بيتيح للمستخدمين متابعة التغييرات في البيانات وإعادة بناء الواجهة عند الضرورة.

التعامل مع WeatherModel و WeatherService: تقسيم الكود إلى WeatherService و WeatherModel بيساعد على فصل منطق جلب البيانات عن النموذج (أو الكلاس) اللي بيحتوي على تعريف البيانات.